import openai
import pymongo
import os
from bson.json_util import dumps
from dotenv import load_dotenv
import time

load_dotenv()

MONGO_URI = os.getenv("MONGO_URI")
DATABASE_NAME = "test"
COLLECTION_NAME = "users"

openai.api_key = os.getenv("OPENAI_API_KEY")

def connect_to_mongodb(uri, db_name, collection_name):
    try:
        client = pymongo.MongoClient(uri)
        db = client[db_name]
        collection = db[collection_name]
        return collection
    except Exception as e:
        print(f"Error connecting to MongoDB: {e}")
        return None

def get_schema(collection):
    try:
        sample_document = collection.find_one()
        if sample_document:
            schema = {k: type(v).__name__ for k, v in sample_document.items()}
            return schema
        else:
            return {}
    except Exception as e:
        print(f"Error retrieving schema: {e}")
        return {}

def generate_mongodb_query(natural_language_query, schema, retries=3):
    schema_str = ", ".join([f"{k}: {v}" for k, v in schema.items()])
    prompt = (
        f"Translate the following natural language query into a MongoDB query in Python dictionary format:\n"
        f"\"{natural_language_query}\"\n"
        f"Schema: {{ {schema_str} }}\n"
        f"Example of expected output format for counting documents:\n"
        f"{{'count': 'users'}}\n"
        f"Ensure the output is a valid MongoDB query in Python dictionary format. Do not include an additional explanation and just provide the necessary query. Formulate a simple query to retrieve the results and use only supported operators."
    )
    
    for attempt in range(retries):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are an expert in MongoDB query generation."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=150
            )
            query = response['choices'][0]['message']['content'].strip()
            return query
        except openai.error.OpenAIError as e:
            print(f"Error generating MongoDB query: {e}")
            if attempt < retries - 1:
                print("Retrying...")
                time.sleep(2 ** attempt)
            else:
                return f"Error generating MongoDB query after {retries} attempts: {e}"

def execute_mongodb_query(collection, query):
    try:
        # Use eval to convert the string representation of the dictionary to an actual dictionary
        query_dict = eval(query)
        
        # Check if the query is a count query
        if 'count' in query_dict:
            count = collection.count_documents(query_dict['filter'] if 'filter' in query_dict else {})
            return {'count': count}
        
        # If not, treat it as a find query
        results = collection.find(query_dict)
        result_list = [doc for doc in results]
        return result_list
    except Exception as e:
        print(f"Error executing MongoDB query: {e}")
        return None

def plain_text_output(result, user_query, retries=3):
    prompt = (
        f"A user requested for the following natural language query:\n"
        f"\"{user_query}\"\n"
        f"The following output was generated by MongoDB after executing the query:\n"
        f"\"{result}\"\n"
        f"Translate the output into natural language in reply to the user appropriately with respect to their initial query:\n"
    )
    
    for attempt in range(retries):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are converting MongoDB query outputs to natural language."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=150
            )
            query = response['choices'][0]['message']['content'].strip()
            return query
        except openai.error.OpenAIError as e:
            print(f"Error generating natural language response: {e}")
            if attempt < retries - 1:
                print("Retrying...")
                time.sleep(2 ** attempt) 
            else:
                return f"Error generating natural language response after {retries} attempts: {e}"

def main():
    collection = connect_to_mongodb(MONGO_URI, DATABASE_NAME, COLLECTION_NAME)
    if collection is None:
        print("Unable to connect to MongoDB.")
        return
    
    user_query = input("Enter your query: ")
    schema = get_schema(collection)
    if not schema:
        print("Unable to retrieve schema from the database.")
        return

    mongodb_query = generate_mongodb_query(user_query, schema)
    if "Error" in mongodb_query:
        print(mongodb_query)
        return
    
    print(f"Generated MongoDB Query: {mongodb_query}")
    result = execute_mongodb_query(collection, mongodb_query)
    if result is None:
        print("Error executing the query.")
        return
    
    print(f"Query Result: {result}")
    final_result = plain_text_output(result, user_query)
    print(f"Output: {final_result}")

if __name__ == "__main__":
    main()
