import pymongo
import os
from dotenv import load_dotenv
import time
import requests

load_dotenv()

MONGO_URI = os.getenv("MONGO_URI")
DATABASE_NAME = "test"
COLLECTION_NAME = "users"

def connect_to_mongodb(uri, db_name, collection_name):
    try:
        client = pymongo.MongoClient(uri)
        db = client[db_name]
        collection = db[collection_name]
        return collection
    except Exception as e:
        print(f"Error connecting to MongoDB: {e}")
        return None

def get_schema(collection):
    try:
        sample_document = collection.find_one()
        if sample_document:
            schema = {k: type(v).__name__ for k, v in sample_document.items()}
            return schema
        else:
            return {}
    except Exception as e:
        print(f"Error retrieving schema: {e}")
        return {}

def generate_mongodb_query(natural_language_query, schema):
    schema_str = ", ".join([f"{k}: {v}" for k, v in schema.items()])
    prompt = (
        f"Translate the following natural language query into a MongoDB aggregation pipeline in Python list format:\n"
        f"\"{natural_language_query}\"\n"
        f"Schema: {{ {schema_str} }}\n"
        f"Ensure the output is a valid MongoDB aggregation pipeline in Python list format. Do not include an additional explanation and just provide the necessary query."
    )

    response = requests.post(
        "http://localhost:11434/api/generate",
        json={"model": "llama3", "prompt": prompt, "stream": False}
    )
    
    print("Response:", response.content)

    response_text = response.json().get('response', '')
    query_start = response_text.find("[")
    query_end = response_text.rfind("]") + 1
    query_text = response_text[query_start:query_end]

    return query_text

def execute_mongodb_query(collection, query):
    try:
        # Convert the string representation of the list to an actual list
        query_list = eval(query)
        
        # Run the aggregation pipeline
        result = list(collection.aggregate(query_list))
        return result
    except Exception as e:
        print(f"Error executing the query: {e}")
        return None

def plain_text_output(result, user_query, retries=3):
    prompt = (
        f"A user requested the following natural language query:\n"
        f"\"{user_query}\"\n"
        f"The following output was generated by MongoDB after executing the query:\n"
        f"\"{result}\"\n"
        f"Translate the output into natural language in reply to the user appropriately with respect to their initial query. Do not give any additional comments just provide the natural language response.\n"
    )
    
    for attempt in range(retries):
        try:
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={"model": "llama3", "prompt": prompt, "stream": False}
            )
            response_text = response.json().get('response', '').strip()
            return response_text
        except requests.exceptions.RequestException as e:
            print(f"Error generating natural language response: {e}")
            if attempt < retries - 1:
                print("Retrying...")
                time.sleep(2 ** attempt)
            else:
                return f"Error generating natural language response after {retries} attempts: {e}"

def main():
    collection = connect_to_mongodb(MONGO_URI, DATABASE_NAME, COLLECTION_NAME)
    if collection is None:
        print("Unable to connect to MongoDB.")
        return

    user_query = input("Enter your query: ")
    schema = get_schema(collection)
    if not schema:
        print("Unable to retrieve schema from the database.")
        return

    mongodb_query = generate_mongodb_query(user_query, schema)
    if "Error" in mongodb_query:
        print(mongodb_query)
        return

    print(f"Generated MongoDB Query: {mongodb_query}")
    result = execute_mongodb_query(collection, mongodb_query)
    if result is None:
        print("Error executing the query.")
        return

    print(f"Query Result: {result}")
    # final_result = None
    # print(f"Query Result: {result}")
    natural_language_response = plain_text_output(result, user_query)
    print(f"Natural Language Response: {natural_language_response}")
    # print(f"hello")

if __name__ == "__main__":
    main()
